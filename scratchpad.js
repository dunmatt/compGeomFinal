// Generated by CoffeeScript 1.4.0
(function() {
  var addEdgeMode, click, deleteMode, drag, dragended, dragmove, dragstarted, drawEdges, drawSlabs, drawVertices, edges, height, keyAlreadyDown, keydown, keyup, lines, points, radius, reset, slabLines, svg, tentativeEdge, vertices;

  points = [];

  lines = [];

  keyAlreadyDown = false;

  addEdgeMode = false;

  deleteMode = false;

  tentativeEdge = null;

  radius = 5;

  height = 400;

  svg = d3.select("body").append("svg").attr("width", 700).attr("height", height);

  slabLines = svg.append("svg:g").selectAll("line");

  edges = svg.append("svg:g").selectAll("line");

  vertices = svg.append("svg:g").selectAll("circle");

  keyup = function() {
    keyAlreadyDown = false;
    addEdgeMode = false;
    return deleteMode = false;
  };

  keydown = function() {
    d3.event.preventDefault();
    if (keyAlreadyDown) {
      return;
    }
    keyAlreadyDown = true;
    if (d3.event.keyCode === 16) {
      return addEdgeMode = true;
    } else if (d3.event.keyCode === 17) {
      return deleteMode = true;
    }
  };

  dragstarted = function(d) {
    var s;
    d3.event.sourceEvent.stopPropagation;
    s = d3.select(this).classed("dragging", true);
    if (addEdgeMode) {
      return tentativeEdge = {
        origin: s,
        line: svg.append("line").attr("x1", s.attr("cx")).attr("y1", s.attr("cy")).attr("x2", s.attr("cx")).attr("y2", s.attr("cy"))
      };
    }
  };

  dragmove = function(d) {
    if (tentativeEdge != null) {
      return tentativeEdge.line.attr("x2", d3.event.x).attr("y2", d3.event.y);
    } else {
      d3.select(this).datum().x = d3.event.x;
      d3.select(this).datum().y = d3.event.y;
      return reset();
    }
  };

  dragended = function(d) {
    var m;
    d3.select(this).classed("dragging", false);
    if (tentativeEdge != null) {
      m = d3.mouse(this);
      points.forEach(function(t) {
        var x, y;
        x = t.x - m[0];
        y = t.y - m[1];
        if (Math.sqrt(x * x + y * y) < radius) {
          return lines[lines.length] = {
            a: tentativeEdge.origin.datum(),
            b: t
          };
        }
      });
      tentativeEdge.line.remove();
      tentativeEdge = null;
    }
    return reset();
  };

  drag = d3.behavior.drag().on("drag", dragmove).on("dragstart", dragstarted).on("dragend", dragended);

  click = function() {
    if (d3.event.defaultPrevented) {
      return;
    }
    if (deleteMode) {
      points.forEach(function(t) {
        var x, y;
        x = t.x - m[0];
        y = t.y - m[1];
        if (Math.sqrt(x * x + y * y) < radius) {
          return lines[lines.length] = {
            a: tentativeEdge.origin.datum(),
            b: t
          };
        }
      });
    } else {
      points[points.length] = {
        x: d3.mouse(this)[0],
        y: d3.mouse(this)[1]
      };
    }
    return reset();
  };

  reset = function() {
    drawSlabs();
    drawEdges();
    return drawVertices();
  };

  drawSlabs = function() {
    slabLines = slabLines.data(points).attr("x1", function(v) {
      return v.x;
    }).attr("x2", function(v) {
      return v.x;
    });
    slabLines.enter().append("line").attr("x1", function(v) {
      return v.x;
    }).attr("x2", function(v) {
      return v.x;
    }).attr("y1", function(v) {
      return 0;
    }).attr("y2", function(v) {
      return height;
    }).attr("class", "slabWall");
    return slabLines.exit().remove();
  };

  drawEdges = function() {
    edges = edges.data(lines).attr("x1", function(l) {
      return l.a.x;
    }).attr("y1", function(l) {
      return l.a.y;
    }).attr("x2", function(l) {
      return l.b.x;
    }).attr("y2", function(l) {
      return l.b.y;
    });
    edges.enter().append("line").attr("x1", function(l) {
      return l.a.x;
    }).attr("y1", function(l) {
      return l.a.y;
    }).attr("x2", function(l) {
      return l.b.x;
    }).attr("y2", function(l) {
      return l.b.y;
    });
    return edges.exit().remove();
  };

  drawVertices = function() {
    vertices = vertices.data(points).attr("cx", function(v) {
      return v.x;
    }).attr("cy", function(v) {
      return v.y;
    });
    vertices.enter().append("circle").attr("cx", function(v) {
      return v.x;
    }).attr("cy", function(v) {
      return v.y;
    }).attr("r", radius).attr("class", "dot").style("cursor", "pointer").call(drag);
    return vertices.exit().remove();
  };

  d3.select(window).on("keyup", keyup).on("keydown", keydown);

  svg.on("click", click);

}).call(this);
