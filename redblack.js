// Generated by CoffeeScript 1.4.0
(function() {

  window.RedBlackTree = (function() {

    function RedBlackTree() {
      this.lastModification = -99999999;
      this.roots = [];
    }

    RedBlackTree.prototype.insert = function(t, i) {
      var oldRoot;
      if (t > this.lastModification) {
        this.lastModification = t;
        if (this.roots.length) {
          oldRoot = this._getRoot(t);
          return this._trackNewRoot(oldRoot, oldRoot.insert(new RbtNode(i.my, i)));
        } else {
          return this._trackNewRoot(false, new RbtNode(i.my, i));
        }
      }
    };

    RedBlackTree.prototype["delete"] = function(t, i) {
      if (t > this.lastModification) {
        this.lastModification = t;
        return this._trackNewRoot(this._getRoot(t)["delete"](i));
      }
    };

    RedBlackTree.prototype.height = function(t) {
      return this._getRoot(t).getHeight();
    };

    RedBlackTree.prototype._getRoot = function(t) {
      return this.roots.filter(function(a) {
        return a.time < t;
      }).reduce(function(a, b) {
        if (a.time > b.time) {
          return a;
        } else {
          return b;
        }
      }).root;
    };

    RedBlackTree.prototype._trackNewRoot = function(o, n) {
      if (o !== n) {
        return this.roots.concat({
          time: t,
          root: newRoot
        });
      }
    };

    return RedBlackTree;

  })();

  window.RbtNode = (function() {

    function RbtNode(key, value) {
      this.key = key;
      this.value = value;
      this.parent = null;
      this.red = true;
      this.children = [];
      this.left = null;
      this.right = null;
      this.newChild = null;
      this.newChildLeft = false;
      this.newChildTime = -1;
    }

    RbtNode.prototype.insert = function(t, i) {
      switch (false) {
        case !(i.key < this.key && t > this.newChildTime && this.newChildLeft):
          this.newChild.insert(t, i);
          break;
        case !(i.key < this.key && this.left):
          this.left.insert(t, i);
          break;
        case !(i.key < this.key):
          this.left = i;
          i.parent = this;
          break;
        case !(i.key > this.key && t > this.newChildTime && !this.newChildLeft):
          this.newChild.insert(t, i);
          break;
        case !(i.key > this.key && this.right):
          this.right.insert(t, i);
          break;
        case !(i.key > this.key):
          this.right = i;
          i.parent = this;
      }
      i._cleanUpAfterInsert();
      return this._updateChildren();
    };

    RbtNode.prototype["delete"] = function(t, i) {
      switch (false) {
        case i.key !== this.key:
          this._removeParentOfOne(this._swapToBottom());
          break;
        case !(i.key < this.key && t > this.newChildTime && this.newChildLeft):
          this.newChild["delete"](t, i);
          break;
        case !(i.key < this.key && this.left):
          this.left["delete"](i);
          break;
        case !(i.key > this.key && t > this.newChildTime && !this.newChildLeft):
          this.newChild["delete"](t, i);
          break;
        case !(i.key > this.key && this.right):
          this.right["delete"](i);
      }
      return this._updateChildren();
    };

    RbtNode.prototype.getRoot = function() {
      if (this.parent) {
        return this.parent.getRoot();
      } else {
        return this;
      }
    };

    RbtNode.prototype.getHeight = function() {
      var l, r, _ref, _ref1;
      l = ((_ref = this.left) != null ? _ref.getHeight() : void 0) || 0;
      r = ((_ref1 = this.right) != null ? _ref1.getHeight() : void 0) || 0;
      return 1 + Math.max(l, r);
    };

    RbtNode.prototype._swapToBottom = function() {
      var other, _ref, _ref1;
      other = this._findPrevious();
      if (other) {
        _ref = [other.key, this.key], this.key = _ref[0], other.key = _ref[1];
        _ref1 = [other.value, this.value], this.value = _ref1[0], other.value = _ref1[1];
        return other;
      } else {
        return this;
      }
    };

    RbtNode.prototype._removeParentOfOne = function(victim) {
      var child, leftShort;
      child = victim.left || victim.right;
      leftShort = false;
      if (victim._isLeftChild()) {
        victim.parent.left = child;
        leftShort = true;
      } else if (victim._isRightChild()) {
        victim.parent.right = child;
      }
      if (child) {
        child.parent = victim.parent;
      }
      if (!victim.red && this.parent) {
        this.parent._cleanUpAfterDelete(leftShort);
      }
      victim.parent = null;
      victim.right = null;
      return victim.left = null;
    };

    RbtNode.prototype._findPrevious = function() {
      var _ref;
      return (_ref = this.left) != null ? _ref._findRightMost() : void 0;
    };

    RbtNode.prototype._findRightMost = function() {
      if (this.right != null) {
        return this.right._findRightMost();
      } else {
        return this;
      }
    };

    RbtNode.prototype._updateChildren = function() {
      this.children = [];
      switch (false) {
        case !(this.left && this.right):
          return this.children = [this.left, this.right];
        case !this.left:
          return this.children = [this.left];
        case !this.right:
          return this.children = [this.right];
      }
    };

    RbtNode.prototype._cleanUpAfterInsert = function() {
      var og, _ref, _ref1, _ref2, _ref3;
      if (this.red && ((_ref = this.parent) != null ? _ref.red : void 0) && ((_ref1 = this._uncle()) != null ? _ref1.red : void 0)) {
        this.parent.red = false;
        this._uncle().red = false;
        this.parent.parent.red = true;
        this.parent.parent._cleanUpAfterInsert();
      }
      if (this.red && ((_ref2 = this.parent) != null ? _ref2.red : void 0)) {
        if (!((_ref3 = this.parent) != null ? _ref3.parent : void 0)) {
          return this.parent.red = false;
        } else {
          og = this.parent.parent;
          og.red = true;
          if (this.parent._isLeftChild()) {
            if (this._isRightChild()) {
              this._rotateLeft(this.parent);
            }
            og.left.red = false;
            return this._rotateRight(og);
          } else {
            if (this._isLeftChild()) {
              this._rotateRight(this.parent);
            }
            og.right.red = false;
            return this._rotateLeft(og);
          }
        }
      }
    };

    RbtNode.prototype._cleanUpAfterDelete = function(leftShort) {
      if (leftShort) {
        return this._cleanUpAfterDeleteLeft();
      } else {
        return this._cleanUpAfterDeleteRight();
      }
    };

    RbtNode.prototype._cleanUpAfterDeleteLeft = function() {
      var _ref, _ref1, _ref2, _ref3, _ref4;
      if ((_ref = this.left) != null ? _ref.red : void 0) {
        return this.left.red = false;
      } else {
        if (this.right && this.right.left && this.right.right && !(((_ref1 = this.left) != null ? _ref1.red : void 0) || this.red || this.right.red || this.right.left.red || this.right.right.red)) {
          this.right.red = true;
          this.parent._cleanUpAfterDelete(this._isLeftChild());
        }
        if (((_ref2 = this.right) != null ? _ref2.red : void 0) && !((_ref3 = this.left) != null ? _ref3.red : void 0) && !this.red) {
          this.red = true;
          this.right.red = false;
          this._rotateLeft(this);
        }
        if (this.red && this.right && this.right.left && this.right.right && !(this.right.red || this.right.left.red || this.right.right.red)) {
          this.red = false;
          return this.right.red = true;
        } else if (this.right && !this.right.red && this.right.right && !(this.right.right.red || this.right.left)) {
          this.right.red = this.red;
          this.red = false;
          return this._rotateLeft(this);
        } else if (this.right && this.right.right && ((_ref4 = this.right.left) != null ? _ref4.red : void 0) && !this.right.right.red) {
          this.right.left.red = this.red;
          this.red = false;
          this._rotateRight(this.right);
          return this._rotateLeft(this);
        }
      }
    };

    RbtNode.prototype._cleanUpAfterDeleteRight = function() {
      var _ref, _ref1, _ref2, _ref3, _ref4;
      if ((_ref = this.right) != null ? _ref.red : void 0) {
        return this.right.red = false;
      } else {
        if (this.left && this.left.right && this.left.left && !(((_ref1 = this.right) != null ? _ref1.red : void 0) || this.red || this.left.red || this.left.right.red || this.left.left.red)) {
          this.left.red = true;
          this.parent._cleanUpAfterDelete(this._isLeftChild());
        }
        if (((_ref2 = this.left) != null ? _ref2.red : void 0) && !((_ref3 = this.right) != null ? _ref3.red : void 0) && !this.red) {
          this.red = true;
          this.left.red = false;
          this._rotateRight(this);
        }
        if (this.red && this.left && this.left.left && this.left.right && !(this.left.red || this.left.left.red || this.left.right.red)) {
          this.red = false;
          return this.left.red = true;
        } else if (this.left && !this.left.red && this.left.left && !(this.left.left.red || this.left.right)) {
          this.left.red = this.red;
          this.red = false;
          return this._rotateRight(this);
        } else if (this.left && this.left.left && ((_ref4 = this.left.right) != null ? _ref4.red : void 0) && !this.left.left.red) {
          this.left.right.red = this.red;
          this.red = false;
          this._rotateLeft(this.left);
          return this._rotateRight(this);
        }
      }
    };

    RbtNode.prototype._rotateLeft = function(root) {
      var B, x, y, _ref;
      if (root != null ? root.right : void 0) {
        x = root;
        y = x.right;
        B = y.left;
        x.right = B;
        y.left = x;
        if (root._isLeftChild()) {
          root.parent.left = y;
        } else if (root._isRightChild()) {
          root.parent.right = y;
        }
        y.parent = x.parent;
        x.parent = y;
        if (B) {
          B.parent = x;
        }
        x._updateChildren();
        y._updateChildren();
        return (_ref = y.parent) != null ? _ref._updateChildren() : void 0;
      }
    };

    RbtNode.prototype._rotateRight = function(root) {
      var B, x, y, _ref;
      if (root != null ? root.left : void 0) {
        y = root;
        x = y.left;
        B = x.right;
        x.right = y;
        y.left = B;
        if (root._isLeftChild()) {
          root.parent.left = x;
        } else if (root._isRightChild()) {
          root.parent.right = x;
        }
        x.parent = y.parent;
        y.parent = x;
        if (B) {
          B.parent = y;
        }
        x._updateChildren();
        y._updateChildren();
        return (_ref = x.parent) != null ? _ref._updateChildren() : void 0;
      }
    };

    RbtNode.prototype._uncle = function() {
      var _ref;
      return (_ref = this.parent) != null ? _ref._brother() : void 0;
    };

    RbtNode.prototype._brother = function() {
      var _ref, _ref1;
      if (this._isLeftChild()) {
        return (_ref = this.parent) != null ? _ref.right : void 0;
      } else {
        return (_ref1 = this.parent) != null ? _ref1.left : void 0;
      }
    };

    RbtNode.prototype._isLeftChild = function() {
      var _ref;
      return this === ((_ref = this.parent) != null ? _ref.left : void 0);
    };

    RbtNode.prototype._isRightChild = function() {
      var _ref;
      return this === ((_ref = this.parent) != null ? _ref.right : void 0);
    };

    RbtNode.prototype.toString = function() {
      return this.key + (this.red ? " red " : " black ") + (this.parent ? " P:" + this.parent.key : "") + (this.left ? " L:" + this.left.key : "") + (this.right ? " R:" + this.right.key : "") + " \[\n" + this.children + " \]\n";
    };

    return RbtNode;

  })();

}).call(this);
